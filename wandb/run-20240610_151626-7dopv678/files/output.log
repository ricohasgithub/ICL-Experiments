
Files already downloaded and verified
predicted labels: tensor([841,  41,  41,  41,  41,  41,  41,  41,  41])
target labels: tensor([ 60, 584, 537, 537, 584, 537, 307, 584, 584])
avg_accuracy: 0.0
Global batch 0, avg loss after 100 batches: 3.164  | Global batch 0, avg accuracy after 100 batches: 0.0
predicted labels: tensor([1360, 1360, 1360,  841,  841,  841,  841, 1360, 1360])
target labels: tensor([826, 826, 826, 467, 467, 573, 467, 323, 826])
predicted labels: tensor([ 633,  633, 1159,  633,  834,  834,  834,  834,  834])
target labels: tensor([282, 282, 874, 282, 753, 753, 753, 924, 753])
predicted labels: tensor([270, 834, 834, 345, 834, 834, 834, 834, 834])
target labels: tensor([739, 594, 594, 427,  29,  29,  29, 594, 594])
predicted labels: tensor([633, 270, 270, 270, 270, 834, 841, 633, 270])
target labels: tensor([349, 522, 238, 840, 401, 804,  47, 734, 948])
predicted labels: tensor([841, 270, 270, 841, 270, 841, 841, 270, 841])
target labels: tensor([698, 382, 382, 457, 341, 457, 457, 382, 457])
predicted labels: tensor([841, 841, 841, 841, 841, 841, 270, 841, 841])
target labels: tensor([111, 433, 433, 433, 130, 111, 278, 111, 433])
predicted labels: tensor([841, 841, 918, 918, 841, 270, 918, 841, 841])
target labels: tensor([533, 708, 406, 406, 708, 308, 406, 708, 708])
predicted labels: tensor([841, 270, 841, 841, 270, 841, 841, 270, 841])
target labels: tensor([784, 633,  63, 737, 633, 737, 737, 633, 737])
predicted labels: tensor([841, 841, 270, 841, 841, 841, 270, 841, 841])
target labels: tensor([330, 330, 653, 409, 409, 330, 222, 409, 409])
predicted labels: tensor([270, 270, 841, 841, 841, 270, 841, 270, 270])
target labels: tensor([435, 435, 827, 277, 827, 945, 827, 435, 435])
predicted labels: tensor([841, 841, 841, 841, 270, 841, 270, 270, 841])
target labels: tensor([390, 661, 298, 661, 825, 661, 825, 825, 661])
predicted labels: tensor([841, 270, 841, 270, 270, 270, 841, 841, 841])
target labels: tensor([300, 657, 601, 657, 615, 657, 601, 601, 601])
predicted labels: tensor([841, 270, 270, 270, 841, 270, 841, 841, 841])
target labels: tensor([958, 304, 813, 304, 297, 304, 297, 297, 297])
predicted labels: tensor([270, 270, 841, 270, 841, 270, 270, 841, 841])
target labels: tensor([  8,   8, 764,   8, 764, 673, 673, 764, 764])
predicted labels: tensor([841, 841, 841, 270, 841, 270, 270, 270, 841])
target labels: tensor([ 80, 532,  80, 751,  80, 366, 751, 751,  80])
predicted labels: tensor([841, 841, 270, 270, 841, 270, 270, 270, 841])
target labels: tensor([850, 448, 828,  20, 398, 944, 910, 290, 596])
predicted labels: tensor([841, 841, 270, 270, 841, 270, 841, 841, 270])
target labels: tensor([179, 179, 105, 105,   5, 105, 179, 328, 105])
predicted labels: tensor([270, 841, 270, 841, 841, 841, 841, 841, 841])
target labels: tensor([873, 474, 220, 170, 170, 170, 474, 474, 474])
predicted labels: tensor([122, 270, 270, 122, 270, 270, 122, 122, 270])
target labels: tensor([ 36, 540, 456, 254, 540, 540, 254, 254, 540])
predicted labels: tensor([122, 270, 270, 270, 122, 122, 122, 270, 122])
target labels: tensor([792, 522, 522,  20, 835, 835, 835, 522, 835])
predicted labels: tensor([122, 122, 122, 270, 122, 122, 270, 270, 122])
target labels: tensor([529, 529, 529, 182, 343, 500, 182, 182, 529])
predicted labels: tensor([270, 122, 270, 122, 270, 122, 122, 122, 270])
target labels: tensor([ 94, 705,  94, 705,  94, 705, 429, 630,  94])
predicted labels: tensor([270, 270, 122, 122, 122, 122, 122, 270, 270])
target labels: tensor([398, 398, 134, 134, 707, 604, 134, 398, 398])
predicted labels: tensor([270, 122, 270, 270, 122, 122, 122, 270, 122])
target labels: tensor([697, 593, 396, 396, 718, 718, 718, 396, 718])
predicted labels: tensor([122, 122, 122, 122, 270, 270, 270, 270, 122])
target labels: tensor([254, 254, 857, 254, 762, 762, 762, 688, 254])
predicted labels: tensor([122, 122, 122, 122, 270, 122, 270, 270, 122])
target labels: tensor([547, 547, 529, 547, 200, 519, 200, 200, 547])
predicted labels: tensor([270, 122, 270, 270, 122, 270, 270, 270, 270])
target labels: tensor([ 67, 464,  67, 288, 788, 288,  67, 288, 288])
predicted labels: tensor([270, 270, 480, 480, 270, 480, 270, 270, 480])
target labels: tensor([126, 709, 230, 230, 126, 230, 126, 495, 230])
predicted labels: tensor([270, 480, 270, 270, 480, 270, 480, 270, 270])
target labels: tensor([921, 536, 921, 405, 536, 634, 536, 921, 921])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([145, 145, 563, 505, 563, 563, 138, 145, 145])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([433, 440, 101, 440, 440, 433, 433, 901, 433])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([269, 269, 617, 269, 617, 146, 617, 742, 617])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([658, 887, 349, 658, 887, 658, 842, 887, 887])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([179, 179, 707, 179, 918, 918, 636, 918, 918])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([ 96, 184, 211, 211, 205, 205, 211, 205, 205])
predicted labels: tensor([270, 270, 270, 101, 270, 270, 270, 270, 270])
target labels: tensor([266, 266, 266, 253, 387, 387, 105, 387, 266])
predicted labels: tensor([101, 270, 270, 101, 270, 270, 270, 101, 101])
target labels: tensor([614, 926, 926, 614, 270, 926, 424, 614, 614])
predicted labels: tensor([270, 270, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([ 36, 157, 732,  36, 157, 157,  31,  36,  36])
predicted labels: tensor([270, 101, 270, 270, 270, 270, 270, 270, 270])
target labels: tensor([854, 311, 339, 854, 391, 854, 391, 391, 391])
predicted labels: tensor([270, 101, 101, 101, 270, 270, 101, 101, 270])
target labels: tensor([846, 373, 796, 373, 846, 846, 373,  77, 846])
predicted labels: tensor([270, 101, 101, 101, 270, 101, 101, 270, 101])
target labels: tensor([411, 702, 702, 702, 411, 351, 637, 411, 702])
predicted labels: tensor([168, 270, 270, 168, 270, 168, 168, 168, 270])
target labels: tensor([541, 699, 245, 261, 807, 107, 133, 609, 696])
predicted labels: tensor([168, 168, 168, 168, 168, 270, 270, 270, 270])
target labels: tensor([565, 202, 671,  51,  17,  44, 862, 371, 580])
predicted labels: tensor([168, 270, 270, 270, 270, 168, 168, 168, 168])
target labels: tensor([149, 549, 797, 797, 797, 431, 431, 431, 431])
predicted labels: tensor([270, 270, 270, 168, 270, 168, 168, 168, 168])
target labels: tensor([315, 419, 315, 222, 315,  95,  95,  95,  95])
predicted labels: tensor([168, 270, 168, 168, 270, 270, 168, 168, 168])
target labels: tensor([638, 461, 762, 614, 284, 169, 418, 552, 828])
predicted labels: tensor([270, 168, 168, 270, 168, 270, 270, 168, 168])
target labels: tensor([220, 538, 453, 677, 538, 220, 220, 538, 538])
predicted labels: tensor([168, 270, 168, 168, 270, 270, 270, 168, 168])
target labels: tensor([595,  13, 595, 633,  13, 656,  13, 595, 595])
predicted labels: tensor([270, 168, 270, 168, 270, 270, 270, 168, 168])
target labels: tensor([293, 122, 654, 122, 293, 393, 293, 122, 122])
predicted labels: tensor([168, 168, 270, 168, 168, 270, 270, 270, 168])
target labels: tensor([314, 690, 495, 314, 314, 495, 483, 495, 314])
predicted labels: tensor([168, 168, 270, 168, 168, 168, 168, 270, 168])
target labels: tensor([872, 872, 481, 198, 872, 198, 198, 454, 198])
predicted labels: tensor([168, 270, 168, 168, 270, 270, 168, 270, 168])
target labels: tensor([367, 267, 827, 827, 781, 267, 827, 267, 827])
predicted labels: tensor([270, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([206, 229, 229, 318, 229, 318, 318,  14, 229])
predicted labels: tensor([168, 270, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([493, 868, 493, 862, 862, 590, 862, 493, 493])
predicted labels: tensor([168, 168, 168, 168, 168, 270, 168, 270, 168])
target labels: tensor([274, 657, 274, 657, 274, 499, 657, 136, 274])
predicted labels: tensor([168, 168, 168, 270, 168, 168, 168, 168, 168])
target labels: tensor([392, 943, 861, 956, 943, 943, 861, 861, 943])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 270, 168, 168])
target labels: tensor([887, 805, 805, 805, 613, 613, 484, 613, 613])
predicted labels: tensor([168, 168, 270, 168, 168, 168, 270, 270, 168])
target labels: tensor([462, 598, 192, 163, 598, 598, 192, 192, 598])
predicted labels: tensor([168, 270, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([101,  56, 267, 267, 101, 362, 267, 101, 267])
predicted labels: tensor([168, 168, 168, 270, 168, 168, 168, 168, 168])
target labels: tensor([596, 596, 357, 731, 708, 596, 357, 357, 357])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([557,   3, 557, 466, 418, 557, 466, 466, 466])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([862, 382, 444, 444, 273, 862, 444, 862, 862])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([789, 125, 642, 642, 125, 642, 125, 111, 125])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([765,   6, 634, 634, 634, 264, 765, 765, 634])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([143, 761, 668, 274, 927, 412, 389, 446, 669])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([908, 125, 510, 444,  57, 477, 636, 709, 767])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([197, 197, 177, 919, 166, 919, 919, 197, 919])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 55, 454, 352, 512, 352, 454, 352, 454, 352])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([875, 209, 485, 485, 661, 661, 661, 485, 485])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 74, 318,  84,  84, 318, 318,  84, 162, 318])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 19,  19, 238, 720, 959, 720,  19, 720, 720])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([688,  48, 688, 874, 874,  77, 874, 688, 688])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 97, 906,  97, 530, 906, 906, 512,  97,  97])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([435, 644, 816, 693, 435, 435, 816, 816, 435])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([  5,  39, 704,  39,   5,  39,   5, 332,   5])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([429, 144, 925, 144, 429, 144, 429, 371, 144])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 83, 505, 505, 183, 947, 183, 183, 505, 183])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([236, 116, 606, 116, 606, 631, 606, 116, 116])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([145,  60, 145,  42,  42, 723, 145,  42,  42])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([213, 852, 477, 152, 406, 877, 507, 335, 842])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([316, 316, 202, 530, 316, 202, 290, 202, 202])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([487, 487, 123, 487, 104, 104, 777, 104, 487])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([743, 925, 925, 457, 925, 743,  19, 743, 743])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([383, 236, 383, 148, 148, 383, 148, 527, 383])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([585, 961, 428, 585, 228, 428, 585, 428, 428])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([655, 288, 655, 288, 874, 288, 258, 655, 288])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 95,  95, 808, 649,  83,  83,  95,  83,  83])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([335,   0,  37, 543, 335,   0,   0, 335, 335])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([611, 611, 826, 826, 804, 615, 826, 611, 826])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([887, 598, 507, 507, 126, 126, 126, 507, 126])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([187, 842, 819, 170, 170, 842, 842, 170, 842])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([457, 457, 261, 261, 457,   4, 441, 261, 261])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([397, 397, 241, 241, 688, 241, 631, 397, 397])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([253, 759, 243, 827, 759, 827, 827, 759, 759])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 93, 524, 584, 584, 694, 584, 524, 524, 584])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([151, 670, 151, 230, 151, 413, 413, 413, 151])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([498, 498, 498, 102, 267, 267,  48, 267, 267])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([862, 889, 660, 759, 889, 759, 759, 889, 759])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([750,  98, 623,  59, 712, 149, 811, 700, 339])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([687, 687, 687, 687, 687, 834, 687, 336, 687])
avg_accuracy: 0.2
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])total, from_support) after 100 batches: 20.0
target labels: tensor([718, 528, 528, 384, 528, 718, 718, 541, 528])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([362, 434, 598, 598, 434, 598, 434, 486, 434])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([720, 527, 720, 216, 216, 720,  60, 216, 216])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([120, 598, 311, 311, 598, 311, 598, 525, 311])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([817, 676, 111, 817, 676, 817, 394, 676, 676])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([854, 854, 854, 630, 817, 935, 630, 630, 630])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 48, 123,  48, 171, 171, 173, 171,  48,  48])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([669, 178, 823, 812, 142, 907, 572, 937,  38])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([282, 678, 248, 607, 881, 487,  32, 569, 417])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([605, 535, 535, 216, 605, 605, 535,  20, 605])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([780, 780, 795,  49, 780,  49, 850,  49,  49])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([809, 453, 824, 824, 809, 824, 255, 809, 824])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([379, 954, 595, 856, 595, 954, 595, 954, 954])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([524, 524, 432, 524, 432,  33, 371, 432, 524])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([482, 152, 400, 400, 152, 400, 152, 576, 152])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([613, 889,  59, 613, 659, 889, 889, 613, 889])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([923, 689, 147, 829, 641, 878, 126, 627, 554])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([447, 447, 447,  12,  12, 623,  12, 412,  12])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 23, 142, 564, 324, 564, 142, 564, 142, 142])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([395, 395, 309, 563, 309, 309, 395, 484, 309])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([597, 692, 492, 492, 888, 492, 888, 888, 888])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([963, 711, 355, 779, 717, 617, 457, 900, 542])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([521, 522, 521, 831, 522, 602, 522, 521, 521])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([707, 318, 177, 635, 707, 707, 635, 635, 707])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([892,  22, 892, 892, 423,  22,  73,  22,  22])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([251, 676, 251, 948, 948, 948, 109, 251, 251])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([617, 857, 680, 617, 680, 168, 617, 680, 680])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([756, 555, 555, 333, 555, 576, 333, 333, 333])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 39, 449,  39, 825,  10,  39,  10,  10,  39])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([526, 412, 412, 526, 412, 526, 917, 931, 412])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([684, 722, 773,  33, 722, 773, 722, 773, 722])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([268, 896, 570, 607, 369,  43, 189, 286, 941])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([575, 368, 596, 596, 375, 596, 368, 368, 368])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([252, 408, 351, 351, 217, 351, 217, 217, 351])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([563, 664, 563, 317, 563, 664, 664, 938, 664])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([696, 119, 119, 855, 119,  20, 855, 855, 119])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([280, 441, 574, 574, 807, 441, 574, 441, 441])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([196, 745, 259, 940, 362,  80, 828, 408, 172])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([944, 442, 339, 723, 723, 339, 339, 723, 339])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([441, 441, 729, 247, 441, 729, 729, 141, 441])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([225, 559, 559,  99, 559, 225, 164, 225, 225])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 50, 919, 191, 919,  72, 919, 191, 191, 191])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 98, 309, 218, 273, 218, 218,  98,  98,  98])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 75,  75, 407, 272, 272, 510,  75, 272, 272])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([310, 310, 236, 269, 871, 310, 871, 871, 310])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([925, 175, 175, 412, 570, 925, 925, 175, 175])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 43, 302,  93, 267,  56, 792, 596, 452, 867])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([574, 125, 574, 136, 574, 125, 489, 125, 125])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([808, 713, 713, 604, 808, 523, 713, 808, 808])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 96,  57,  96, 665, 565, 565, 565,  96, 565])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([183, 280, 280, 866, 280, 845, 183, 183, 183])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([527, 885, 922, 475, 549, 676, 352, 625, 179])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([935, 935, 935,  87, 167,  16,  16,  16, 935])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([327, 658, 658, 658, 327, 655, 680, 327, 327])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([572, 109, 572, 109, 572, 358, 339, 109, 109])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([394, 394, 256, 104, 104, 570, 104, 394, 394])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([832, 917, 934, 707, 476,  20, 650, 712, 548])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([901, 368,  46, 504, 368, 901, 901, 368, 901])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 14, 957, 355, 957,  14,  14, 250, 957, 957])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([513, 275, 733, 589, 275, 589, 275, 589, 275])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([471, 538, 190, 471, 555, 471, 538, 538, 471])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([299, 299, 299, 751, 895, 895, 294, 895, 299])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([254, 526, 526, 541, 375, 254, 254, 526, 254])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([429, 642, 155, 642, 155, 690, 642, 155, 642])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([517, 210, 517, 916, 447, 447, 517, 447, 517])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([443, 660, 807, 393, 291, 840, 375, 689, 263])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([951, 821, 441, 951, 441, 441, 951, 873, 951])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([634, 474, 868, 474, 634, 634, 196, 474, 634])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([877,  89, 927, 844, 120,  39, 551, 321, 344])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([570, 954, 954, 211, 954, 570, 570, 237, 954])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([927, 403, 927, 927, 842, 797, 797, 797, 797])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([550, 332, 509, 346, 550, 332, 550, 332, 550])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([173, 504, 443, 504, 504, 173, 173,  35, 504])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([649, 306, 305, 305, 306, 305, 306, 226, 305])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 90,  90, 656, 656, 335, 791, 656,  90, 656])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([716, 932, 716, 716, 959, 959, 959,  27, 959])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([623, 725,   8, 150, 725, 725, 150, 150, 725])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 98, 859,  98,  98, 729, 859, 741, 859,  98])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([229, 717, 717, 229, 717, 677, 171, 229, 717])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([515, 423,  64, 861, 861, 423, 861, 423, 861])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([494, 494, 213, 377, 213, 770, 494, 213, 494])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([114, 114, 482, 114, 197, 636, 197, 197, 197])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([534, 899, 534, 800, 800, 862, 534, 800, 800])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([129, 475, 129, 482, 475, 129, 666, 475, 129])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([788, 546, 920, 885, 527,  45, 947, 941, 666])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([359, 365, 239, 128, 405, 113, 742, 128, 514])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([315, 285, 670, 315, 285, 285, 315, 578, 315])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([856, 113, 143, 371, 113, 371, 371, 113, 113])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([241, 849, 241, 797, 241, 849, 259, 849, 849])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([181, 134, 589, 713, 616,  75, 684, 405, 189])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 53, 208, 208, 208, 904,  53,  53, 914,  53])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([798, 184, 184, 339, 184, 339, 339, 464, 339])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([167, 350, 167, 350, 350, 944,  42, 167, 350])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([587, 760, 760, 587, 760, 510, 587, 520, 760])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([826, 224, 490, 495, 490, 224, 224, 490, 490])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([496, 883, 883, 496, 883, 184, 144, 496, 883])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([599, 918, 918, 599, 111, 918, 661, 599, 918])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 35, 183, 364, 183,  22, 364, 364, 183, 364])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([789, 789, 255, 789, 566, 417, 566, 566, 566])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 44,  44, 462,  44, 732, 732,  93, 732,  44])
avg_accuracy: 0.13
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])tal, from_support) after 100 batches: 13.0
target labels: tensor([675,  19, 247, 783, 791, 927, 908, 368, 558])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([876, 876, 817,  53,  53, 876,  53, 785,  53])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([645, 685, 685, 645, 645,  84, 862, 685, 645])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([639, 639, 893, 639, 808, 893, 893,   9, 893])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([722, 589, 722, 827, 102, 102, 102, 722, 102])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 29,  29, 690,  29,  50, 690, 690, 138, 690])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([936, 485, 485, 936, 485, 164, 938, 936, 485])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([455, 661, 661, 661, 704, 171, 171, 171, 171])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([909, 761, 909, 909, 824, 824, 112, 824, 909])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([827, 827, 800, 108, 445, 108, 827, 108, 827])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([663, 425, 963, 271, 425, 425, 963, 963, 963])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([270, 270, 456, 662, 482, 482, 270, 482, 270])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([291, 511, 719, 816, 291, 816, 291, 816, 816])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([267, 267, 107, 390, 323, 390, 390, 267, 390])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([836, 633, 633, 511, 836, 836, 396, 633, 836])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([782, 365, 782, 365, 782, 365, 134, 531, 782])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([888, 806, 888, 184, 888, 607, 806, 806, 806])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([482, 297, 482, 811, 785, 785, 482, 785, 785])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([ 70,  70,  70, 563, 748, 678, 563, 563, 563])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([615, 172, 615, 615, 767, 172, 240, 172, 172])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([705, 627, 453, 873, 873, 627, 873, 627, 873])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([829, 140,  77,  39,  39,  39, 829, 829, 829])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([676, 697, 360, 676, 697, 697, 679, 676, 697])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([230, 865, 230, 230, 148, 148, 148, 705, 148])
predicted labels: tensor([168, 168, 168, 168, 168, 168, 168, 168, 168])
target labels: tensor([690,  40, 690,  40, 690, 624, 947,  40,  40])
Traceback (most recent call last):
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 71, in <module>
    experiment_base(dataset)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 61, in experiment_base
    trainer.train()
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/train_resnet.py", line 94, in train
    preds = self.model(torch.permute(examples, (0, 1, 4, 2, 3)))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in forward
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in <listcomp>
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 16, in sequence_pass
    x = super(ProjectionResNet, self).forward(x)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet.py", line 65, in forward
    z = self.layer3(z)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torchvision/models/resnet.py", line 96, in forward
    out = self.conv2(out)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 457, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 453, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
KeyboardInterrupt