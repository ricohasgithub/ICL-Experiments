
Files already downloaded and verified
params: 333239
predicted labels: tensor([238, 797, 238, 238, 238, 797, 866, 797, 238])
target labels: tensor([511, 746, 511, 156, 511, 746, 453, 746, 511])
avg_accuracy: 0.0
Global batch 0, avg loss after 100 batches: 3.164  | Global batch 0, avg accuracy after 100 batches: 0.0
predicted labels: tensor([866, 327, 327, 866, 327, 327, 327, 866, 866])
target labels: tensor([445, 114, 443, 445, 443, 104, 443, 445, 445])
predicted labels: tensor([503, 327, 327, 503, 503, 327, 503, 503, 503])
target labels: tensor([590, 819, 819, 655,  28, 819, 590, 590, 590])
predicted labels: tensor([503, 866, 503, 503, 503, 866, 503, 503, 503])
target labels: tensor([749, 758, 221, 221, 221,  56, 749, 749, 749])
predicted labels: tensor([866, 503, 503, 866, 503, 866, 866, 503, 866])
target labels: tensor([817, 434, 226, 505, 434, 817, 817, 434, 817])
predicted labels: tensor([503, 503, 503, 503, 503, 503, 503, 503, 503])
target labels: tensor([932, 384, 799, 384, 127, 799, 799, 384, 799])
predicted labels: tensor([866, 503, 866, 503, 866, 503, 866, 503, 866])
target labels: tensor([261, 941, 637, 941, 637, 141, 637, 941, 637])
predicted labels: tensor([503, 503, 503, 503, 503, 503, 503, 503, 503])
target labels: tensor([ 62,  76,  62,  62,  76, 837, 384,  76,  76])
predicted labels: tensor([503, 503, 503, 503, 503, 503, 503, 503, 503])
target labels: tensor([826, 389, 826, 167, 245, 167, 826, 167, 167])
predicted labels: tensor([503, 503, 503, 503, 503, 503, 503, 503, 503])
target labels: tensor([238, 933, 131, 238, 134, 134, 134, 238, 134])
predicted labels: tensor([503, 503, 503, 503, 503, 503, 503, 503, 503])
target labels: tensor([210, 602, 602, 772, 210,  26, 602, 210, 602])
predicted labels: tensor([503, 503, 452, 503, 452, 503, 503, 503, 503])
target labels: tensor([ 25, 835, 936,  25, 465, 835,  25, 835,  25])
predicted labels: tensor([503, 503, 503, 452, 503, 452, 503, 503, 503])
target labels: tensor([857, 857, 857, 156, 763, 952, 763, 763, 763])
predicted labels: tensor([503, 503, 503,  62, 503,  62,  62, 503, 503])
target labels: tensor([437, 516, 437, 696, 770, 696, 696, 437, 437])
predicted labels: tensor([503,  62, 503,  62,  62, 503,  62, 503, 503])
target labels: tensor([253,  20, 325,   8,  20, 325,  20, 325, 325])
predicted labels: tensor([503, 503,  62,  62,  62, 503, 503, 503, 503])
target labels: tensor([221, 400, 595, 595, 595, 400, 478, 400, 400])
predicted labels: tensor([503,  62,  62,  62,  62, 503,  62, 503,  62])
target labels: tensor([897,  10, 857, 857, 857, 897,  14, 897, 857])
predicted labels: tensor([503,  62, 503,  62,  62,  62,  62,  62,  62])
target labels: tensor([403, 822, 129,  42, 822,  42, 822,  42, 822])
predicted labels: tensor([ 62,  62,  62, 156, 503, 503, 156, 503,  62])
target labels: tensor([ 68,  68,  68, 936, 650, 650, 355, 650,  68])
predicted labels: tensor([503, 156, 156, 503, 156, 503, 156, 503, 156])
target labels: tensor([908, 610, 610, 908,   4, 908, 610, 815, 610])
predicted labels: tensor([503, 503, 503, 156, 156, 503, 503, 503, 503])
target labels: tensor([603, 765, 765, 587, 420, 765, 603, 603, 765])
predicted labels: tensor([503, 156, 503, 156, 156, 156, 503, 503, 503])
target labels: tensor([374, 246, 374, 246, 781, 246, 335, 374, 374])
predicted labels: tensor([503, 503, 156, 503, 156, 156, 156, 156, 156])
target labels: tensor([328, 798, 674, 481, 804, 741,  27, 511,  80])
predicted labels: tensor([503, 156, 503, 503, 156, 503, 156, 503, 156])
target labels: tensor([943, 657, 392, 943, 657, 943, 657, 170, 657])
predicted labels: tensor([156, 156, 156, 503, 156, 156, 156, 503, 156])
target labels: tensor([500, 565, 561, 703, 261, 475, 578, 167, 740])
predicted labels: tensor([156, 156, 156, 156, 503, 503, 156, 503, 156])
target labels: tensor([376, 102,   6, 829,  17, 180, 627, 825, 624])
predicted labels: tensor([503, 156, 156, 156, 503, 156, 503, 503, 503])
target labels: tensor([916, 931, 931, 931, 916, 219, 916, 165, 916])
predicted labels: tensor([503, 503, 156, 503, 156, 503, 156, 156, 156])
target labels: tensor([243,  24, 704, 243, 556, 243, 556, 556, 556])
predicted labels: tensor([156, 503, 156, 156, 503, 156, 156, 503, 503])
target labels: tensor([770, 875, 820, 770, 875, 464, 770, 875, 875])
predicted labels: tensor([156, 503, 156, 156, 503, 156, 503, 156, 503])
target labels: tensor([631, 730, 631, 631, 730, 261, 730, 434, 730])
predicted labels: tensor([578, 578, 503, 503, 578, 578, 503, 578, 503])
target labels: tensor([310, 310, 348, 348, 439, 648, 348, 310, 348])
predicted labels: tensor([503, 578, 578, 578, 578, 503, 578, 503, 503])
target labels: tensor([312, 345, 287, 656, 345, 312, 345, 312, 312])
predicted labels: tensor([578, 578, 578, 503, 578, 578, 578, 578, 578])
target labels: tensor([212,  52,  52, 442, 595, 595,  52, 595,  52])
predicted labels: tensor([578, 578, 578, 503, 578, 503, 578, 578, 578])
target labels: tensor([526, 526, 207, 729, 207, 459, 526, 207, 207])
predicted labels: tensor([578, 503, 503, 503, 578, 503, 578, 578, 578])
target labels: tensor([678, 466, 238, 238, 678, 238, 578, 678, 678])
predicted labels: tensor([578, 578, 503, 503, 503, 578, 578, 503, 503])
target labels: tensor([724, 724,  77, 222, 222, 724,  83, 222, 222])
predicted labels: tensor([503, 578, 578, 578, 503, 503, 503, 503, 503])
target labels: tensor([103, 329, 329, 329,  11,  11,  11, 669,  11])
predicted labels: tensor([578, 503, 503, 578, 503, 578, 503, 578, 578])
target labels: tensor([643, 477, 477, 244, 477, 244, 327, 244, 244])
predicted labels: tensor([578, 578, 578, 578, 578, 503, 578, 503, 578])
target labels: tensor([610, 489, 489, 610, 489, 447, 610, 692, 489])
predicted labels: tensor([503, 578, 578, 503, 503, 578, 578, 578, 503])
target labels: tensor([137, 862, 614, 137, 137, 614, 614,  44, 137])
predicted labels: tensor([578, 578, 503, 578, 578, 503, 503, 578, 503])
target labels: tensor([628, 613, 933, 628, 628, 933, 933, 703, 933])
predicted labels: tensor([578, 578,  99,  99, 578, 578, 578,  99, 578])
target labels: tensor([688, 127, 195, 400, 189, 487,  68, 448, 617])
predicted labels: tensor([578,  99,  99, 578, 578, 578, 578,  99, 578])
target labels: tensor([856, 593, 593, 856, 465, 856, 744, 593, 856])
predicted labels: tensor([578,  99,  99,  99,  99, 578, 578, 578, 578])
target labels: tensor([927,   1, 414,   1,   1, 258, 927, 927, 927])
predicted labels: tensor([578,  99,  99,  99,  99, 578, 578,  99,  99])
target labels: tensor([333, 192, 209, 407, 407, 333, 333, 407, 407])
predicted labels: tensor([578,  99,  99, 578,  99, 578, 578, 578,  99])
target labels: tensor([705,  24,  24, 705,  24, 615, 612, 705,  24])
predicted labels: tensor([578, 578, 578, 578,  99, 578, 578,  99, 578])
target labels: tensor([496, 728, 496, 728, 271, 496, 728, 118, 496])
predicted labels: tensor([ 99, 578,  99, 578, 578, 578, 578, 578, 578])
target labels: tensor([490, 474, 794, 474, 322, 322, 322, 474, 474])
predicted labels: tensor([578, 578, 578, 578, 578,  99, 578, 578,  99])
target labels: tensor([515, 918, 869,  15, 770, 870, 543, 642, 797])
predicted labels: tensor([578, 578,  99, 578, 578,  99,  99,  99, 578])
target labels: tensor([156, 156, 727, 281, 156, 475, 475, 475, 156])
predicted labels: tensor([ 99,  99,  99,  99, 578,  99,  99, 578,  99])
target labels: tensor([892, 553, 892, 892, 433, 553, 553, 944, 553])
predicted labels: tensor([ 99, 578,  99,  99,  99,  99,  99,  99,  99])
target labels: tensor([466,  73, 177, 177, 289, 177, 289, 289, 177])
predicted labels: tensor([ 99, 578, 578, 578,  99, 578, 578,  99,  99])
target labels: tensor([447, 928, 583, 928, 447, 928, 291, 447, 447])
predicted labels: tensor([578,  99,  99,  99, 578, 578, 578, 578,  99])
target labels: tensor([618,  74, 260, 137, 857, 301, 829,  26, 624])
predicted labels: tensor([578,  99,  99,  99, 578, 578, 578, 578, 578])
target labels: tensor([683, 417, 417, 417, 439, 625, 683, 683, 683])
predicted labels: tensor([578, 578, 578,  99, 578,  99, 578,  99,  99])
target labels: tensor([588, 673, 554, 176, 387, 635, 175, 398, 613])
predicted labels: tensor([ 99,  99, 578, 578, 578,  99,  99,  99, 578])
target labels: tensor([911, 206, 961, 961, 961, 300, 300, 300, 961])
predicted labels: tensor([578, 578, 578,  99, 578,  99,  99,  99, 578])
target labels: tensor([ 59,  59, 270, 321,  59, 321, 354, 321,  59])
predicted labels: tensor([578, 578, 578,  99,  99, 578,  99, 578,  99])
target labels: tensor([536,  73, 725, 765, 252, 928, 183, 510, 946])
predicted labels: tensor([ 99, 578, 578, 578, 578,  99, 578,  99, 578])
target labels: tensor([390, 302, 782, 947, 782, 390, 782, 390, 782])
predicted labels: tensor([578, 578, 578,  99,  99, 578, 578,  99,  99])
target labels: tensor([158, 172, 172,  59,  59, 172, 559,  59,  59])
predicted labels: tensor([578,  99,  99, 578, 578, 578,  99,  99, 578])
target labels: tensor([ 62, 657, 657, 707, 707, 707, 657, 190, 707])
predicted labels: tensor([578, 578,  99, 578, 578,  99,  99, 578, 578])
target labels: tensor([718, 496, 739, 496, 511, 739, 739, 496, 496])
predicted labels: tensor([ 99,  99, 578,  99,  99, 578,  99, 578, 578])
target labels: tensor([342, 477, 240, 342, 721, 240, 342, 240, 240])
predicted labels: tensor([ 99,  99,  99, 578, 578,  99,  99, 578,  99])
target labels: tensor([877, 877,  55, 637, 637, 321, 877, 637, 877])
predicted labels: tensor([ 99, 578, 578,  99, 578,  99, 578,  99,  99])
target labels: tensor([163, 209, 342, 229, 342, 163, 342, 163, 163])
predicted labels: tensor([578, 578,  99, 578,  99, 578, 578, 578,  99])
target labels: tensor([602, 514, 487,   1, 568,  30, 753, 336, 723])
predicted labels: tensor([ 99, 578, 578,  99,  99,  99,  99, 578, 578])
target labels: tensor([ 17, 364, 364, 202, 497, 497, 497, 364, 364])
predicted labels: tensor([578,  99,  99,  99, 578, 578,  99,  99, 578])
target labels: tensor([900, 883, 883, 883, 900, 900, 538, 958, 900])
predicted labels: tensor([ 99,  99, 578,  99,  99,  99, 578, 578, 578])
target labels: tensor([902, 734, 917, 792, 734, 734, 917, 917, 917])
predicted labels: tensor([578, 578,  99,  99, 578,  99, 578,  99,  99])
target labels: tensor([650, 650, 184, 184, 650, 184, 195, 330, 184])
predicted labels: tensor([578, 578, 578,  99, 578,  99, 578,  99, 578])
target labels: tensor([513, 513, 513, 215, 874, 215, 753, 215, 513])
predicted labels: tensor([578, 578, 578, 578, 578, 578, 578,  99, 578])
target labels: tensor([517, 486, 579, 579, 486, 579, 486, 217, 486])
predicted labels: tensor([ 99, 578, 578, 578,  99,  99,  99, 578, 578])
target labels: tensor([273, 678, 791, 678, 206, 206, 206, 678, 678])
predicted labels: tensor([578,  99,  99, 578,  99,  99, 578, 578,  99])
target labels: tensor([461, 855, 855, 461, 855,  32,  54, 461, 855])
predicted labels: tensor([ 99,  99, 578, 578, 578,  99,  99, 578,  99])
target labels: tensor([149, 404, 466, 466, 412, 404, 404, 466, 404])
predicted labels: tensor([578,  99,  99,  99,  99,  99,  99,  99,  99])
target labels: tensor([180, 163, 163, 800, 472, 163, 800, 800, 163])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([439, 439, 218, 250, 816, 439, 218, 218, 218])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([852, 191, 648, 648, 191, 191, 648,  23, 191])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([863, 346, 933, 933, 933, 346, 346, 325, 933])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([853, 441, 441, 137, 314, 314, 314, 441, 314])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([  3,   3,  49,  49, 503, 212,  49,   3,   3])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 52, 150, 391, 391, 960, 391, 150, 150, 391])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([865, 920, 865, 873, 920, 374, 865, 920, 865])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 28, 506, 275, 940, 390, 622, 104,  35, 180])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([558, 284, 284, 558, 558, 284, 379,  88, 284])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 60,  60, 805, 301, 855,  60, 805, 805,  60])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([341, 341, 901, 901, 341, 901, 879, 657, 901])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([574, 574,  22,  22, 574,  22, 775, 292,  22])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([  4, 792, 735, 196, 792,   4,   4, 792, 792])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([596, 798, 911, 596, 596, 796, 796, 796, 796])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([384,   1, 384, 331,   1, 384,   1, 548, 384])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([752, 900, 900, 583, 900, 583,  60, 583, 900])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([746,  33,  33, 372,  33, 372, 372,  59, 372])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([453, 658, 453, 326, 453, 326, 553, 326, 326])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([917,  37, 636, 641, 162, 712, 569, 351, 378])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([562, 562, 443, 352, 641, 562, 352, 352, 352])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([893, 915, 519, 906, 915, 915, 519, 519, 915])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([689, 376, 376, 689, 749, 457, 689, 376, 689])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([882, 685, 685, 882, 644, 882, 685,  61, 882])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([922, 873, 575, 403, 808, 481, 359, 374, 400])
avg_accuracy: 0.19
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])ccuracy (total, from_support) after 100 batches: 19.0
target labels: tensor([487, 585, 585, 790, 804, 585, 487, 487, 585])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([699, 699, 351, 699, 847, 863, 847, 847, 699])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([192, 759, 538, 759, 538, 732, 538, 759, 759])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 40, 933, 933, 755, 755, 933, 755, 633, 933])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([804, 168, 644, 366, 894, 546, 787, 416, 514])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([506, 451, 506, 341, 451, 495, 451, 506, 451])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([710, 144, 144, 607, 710, 144,  11, 710, 144])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([829, 630, 829, 314, 630, 488, 630, 829, 829])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([621, 242, 600,  80, 600, 621, 600, 621, 600])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([742,  70, 673, 742,  70,  70, 742, 844, 742])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 62, 221, 174, 174, 174, 155, 221, 221, 174])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([426,  77, 459, 426,  77, 426,  77, 432,  77])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([748, 796, 663, 663, 535, 535, 663, 535, 535])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([937, 937, 464, 464, 569, 293, 937, 464, 937])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 10, 722,  10, 818, 167,  10, 167, 167, 167])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([814, 103, 103, 814, 133, 771, 814, 103, 814])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([269, 269, 430, 691, 691, 256, 691, 269, 691])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([510, 723, 510, 419, 419, 419, 893, 510, 510])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([147,  70, 179, 179, 147, 179, 147, 855, 179])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([ 50, 185, 185, 804, 803, 185, 803, 803, 185])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([801, 686, 686, 686, 192, 524, 192, 192, 192])
predicted labels: tensor([99, 99, 99, 99, 99, 99, 99, 99, 99])
target labels: tensor([176, 775,  61, 176,  95,  95,  95, 176, 176])
Traceback (most recent call last):
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 71, in <module>
    experiment_base(dataset)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 61, in experiment_base
    trainer.train()
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/train_resnet.py", line 95, in train
    preds = self.model(torch.permute(examples, (0, 1, 4, 2, 3)))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in forward
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in <listcomp>
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 16, in sequence_pass
    x = super(ProjectionResNet, self).forward(x)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet.py", line 63, in forward
    z = self.layer1(z)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torchvision/models/resnet.py", line 100, in forward
    identity = self.downsample(x)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 168, in forward
    return F.batch_norm(
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/functional.py", line 2438, in batch_norm
    return torch.batch_norm(
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/traceback.py", line 193, in format_stack
    def format_stack(f=None, limit=None):
KeyboardInterrupt