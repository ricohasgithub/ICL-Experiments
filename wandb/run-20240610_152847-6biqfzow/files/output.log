
Files already downloaded and verified
conv1.weight torch.Size([64, 1, 7, 7])
bn1.weight torch.Size([64])
bn1.bias torch.Size([64])
layer1.0.conv1.weight torch.Size([16, 64, 3, 3])
layer1.0.bn1.weight torch.Size([16])
layer1.0.bn1.bias torch.Size([16])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
layer1.0.bn2.weight torch.Size([16])
layer1.0.bn2.bias torch.Size([16])
layer1.0.downsample.0.weight torch.Size([16, 64, 1, 1])
layer1.0.downsample.1.weight torch.Size([16])
layer1.0.downsample.1.bias torch.Size([16])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
layer1.1.bn1.weight torch.Size([16])
layer1.1.bn1.bias torch.Size([16])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
layer1.1.bn2.weight torch.Size([16])
layer1.1.bn2.bias torch.Size([16])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
layer2.0.bn1.weight torch.Size([32])
layer2.0.bn1.bias torch.Size([32])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
layer2.0.bn2.weight torch.Size([32])
layer2.0.bn2.bias torch.Size([32])
layer2.0.downsample.0.weight torch.Size([32, 16, 1, 1])
layer2.0.downsample.1.weight torch.Size([32])
layer2.0.downsample.1.bias torch.Size([32])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
layer2.1.bn1.weight torch.Size([32])
layer2.1.bn1.bias torch.Size([32])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
layer2.1.bn2.weight torch.Size([32])
layer2.1.bn2.bias torch.Size([32])
layer3.0.conv1.weight torch.Size([32, 32, 3, 3])
layer3.0.bn1.weight torch.Size([32])
layer3.0.bn1.bias torch.Size([32])
layer3.0.conv2.weight torch.Size([32, 32, 3, 3])
layer3.0.bn2.weight torch.Size([32])
layer3.0.bn2.bias torch.Size([32])
layer3.0.downsample.0.weight torch.Size([32, 32, 1, 1])
layer3.0.downsample.1.weight torch.Size([32])
layer3.0.downsample.1.bias torch.Size([32])
layer3.1.conv1.weight torch.Size([32, 32, 3, 3])
layer3.1.bn1.weight torch.Size([32])
layer3.1.bn1.bias torch.Size([32])
layer3.1.conv2.weight torch.Size([32, 32, 3, 3])
layer3.1.bn2.weight torch.Size([32])
layer3.1.bn2.bias torch.Size([32])
layer4.0.conv1.weight torch.Size([64, 32, 3, 3])
layer4.0.bn1.weight torch.Size([64])
layer4.0.bn1.bias torch.Size([64])
layer4.0.conv2.weight torch.Size([64, 64, 3, 3])
layer4.0.bn2.weight torch.Size([64])
layer4.0.bn2.bias torch.Size([64])
layer4.0.downsample.0.weight torch.Size([64, 32, 1, 1])
layer4.0.downsample.1.weight torch.Size([64])
layer4.0.downsample.1.bias torch.Size([64])
layer4.1.conv1.weight torch.Size([64, 64, 3, 3])
layer4.1.bn1.weight torch.Size([64])
layer4.1.bn1.bias torch.Size([64])
layer4.1.conv2.weight torch.Size([64, 64, 3, 3])
layer4.1.bn2.weight torch.Size([64])
layer4.1.bn2.bias torch.Size([64])
fc.weight torch.Size([64, 64])
fc.bias torch.Size([64])
projection_layer.weight torch.Size([1623, 64])
projection_layer.bias torch.Size([1623])
predicted labels: tensor([1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310])
target labels: tensor([732, 874, 357, 357, 932, 874, 874, 357, 357])
avg_accuracy: 0.0
Global batch 0, avg loss after 100 batches: 3.164  | Global batch 0, avg accuracy after 100 batches: 0.0
predicted labels: tensor([1310, 1310,  599, 1310, 1310, 1310,  599, 1310, 1310])
target labels: tensor([518, 518, 631, 598, 518, 598, 575, 598, 518])
predicted labels: tensor([599, 599, 599, 599, 624, 624, 624, 599, 599])
target labels: tensor([791, 368, 368, 368, 483, 483, 483, 706, 368])
predicted labels: tensor([599, 599, 599, 599, 599,  54, 599, 599, 599])
target labels: tensor([ 95,  95, 840, 355, 355, 308, 355,  95,  95])
predicted labels: tensor([599,  54,  54,  54, 599, 599, 157,  54, 599])
target labels: tensor([318, 414, 268, 414, 318, 318, 248, 414, 318])
predicted labels: tensor([ 54,  54,  54,  54,  54,  54,  54, 157,  54])
target labels: tensor([826, 250, 250, 398, 250, 826, 826, 100, 826])
predicted labels: tensor([54, 54, 54, 54, 54, 54, 54, 54, 54])
target labels: tensor([101,  68, 757, 757,  79, 757,  79,  79,  79])
predicted labels: tensor([54, 54, 54, 54, 54, 54, 54, 54, 54])
target labels: tensor([213, 875, 962, 170, 213, 875, 875, 213, 875])
predicted labels: tensor([157,  54,  54, 157,  54,  54, 157, 157, 157])
target labels: tensor([554, 886, 886, 554, 418, 886, 513, 554, 554])
predicted labels: tensor([ 54,  54, 157,  54,  54,  54,  54,  54,  54])
target labels: tensor([721, 538, 355, 538, 721, 332, 538, 721, 721])
predicted labels: tensor([ 54, 157,  54,  54, 157,  54, 943, 157,  54])
target labels: tensor([426, 625, 426, 426, 625, 323, 253, 625, 426])
predicted labels: tensor([732, 943, 732, 157, 732, 157, 157, 157, 732])
target labels: tensor([352, 824, 352,  23, 352,  23, 526,  23, 352])
predicted labels: tensor([943, 732, 732, 732, 943, 732, 943, 943, 943])
target labels: tensor([430,  67, 903, 903, 753, 903, 430, 430, 430])
predicted labels: tensor([732, 732, 943, 732, 732, 943, 732, 732, 732])
target labels: tensor([ 36,  36, 802, 163,  36, 506, 163, 163,  36])
predicted labels: tensor([732, 943, 732, 943, 732, 732, 943, 732, 732])
target labels: tensor([615, 642, 615, 642, 615, 880, 642, 726, 615])
predicted labels: tensor([943, 943, 732, 732, 732, 732, 732, 943, 943])
target labels: tensor([339, 339, 499, 518, 916, 518, 518, 339, 339])
predicted labels: tensor([732, 732, 732, 943, 732, 943, 943, 943, 732])
target labels: tensor([308, 527, 308,   1, 308, 137,   1,   1, 308])
predicted labels: tensor([732, 732, 943, 732, 943, 943, 943, 943, 943])
target labels: tensor([839, 839, 931, 839, 618, 618, 618,  74, 618])
predicted labels: tensor([943, 943, 943, 732, 732, 732, 732, 732, 732])
target labels: tensor([ 58,  58,  58, 697, 362, 451, 697, 697, 697])
predicted labels: tensor([732, 732, 732, 732, 732, 732, 732, 732, 732])
target labels: tensor([685, 665, 685, 670, 665, 685, 665, 483, 685])
predicted labels: tensor([711, 732, 711, 943, 732, 732, 732, 732, 732])
target labels: tensor([260, 558, 619, 149, 944, 941, 618, 566, 461])
predicted labels: tensor([732, 732, 711, 732, 943, 711, 732, 711, 732])
target labels: tensor([559, 559, 480, 845,  85, 480, 559, 480, 559])
predicted labels: tensor([943, 943, 943, 943, 943, 943, 732, 732, 943])
target labels: tensor([903, 200, 903, 200, 903, 200, 826, 939, 903])
predicted labels: tensor([732, 732, 943, 943, 943, 943, 943, 943, 943])
target labels: tensor([814, 424, 388, 812, 812, 812, 388, 388, 812])
predicted labels: tensor([732, 943, 943, 943, 732, 943, 943, 943, 732])
target labels: tensor([529, 282,  24, 339,  89,  40, 589, 189, 515])
predicted labels: tensor([943, 943, 943, 943, 943, 943, 943, 732, 943])
target labels: tensor([763, 763,  82, 855, 855, 855, 763,  25, 855])
predicted labels: tensor([943, 943, 943, 943, 943, 943, 732, 943, 943])
target labels: tensor([244, 748, 748, 748, 244, 586, 276, 244, 244])
predicted labels: tensor([943, 943, 943, 943, 943, 943, 943, 943, 943])
target labels: tensor([135, 912, 235, 135, 235, 135, 152, 235, 235])
Traceback (most recent call last):
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 71, in <module>
    experiment_base(dataset)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 61, in experiment_base
    trainer.train()
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/train_resnet.py", line 97, in train
    preds = self.model(torch.permute(examples, (0, 1, 4, 2, 3)))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in forward
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 24, in <listcomp>
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 16, in sequence_pass
    x = super(ProjectionResNet, self).forward(x)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet.py", line 63, in forward
    z = self.layer1(z)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torchvision/models/resnet.py", line 93, in forward
    out = self.bn1(out)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 168, in forward
    return F.batch_norm(
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/functional.py", line 2438, in batch_norm
    return torch.batch_norm(
KeyboardInterrupt