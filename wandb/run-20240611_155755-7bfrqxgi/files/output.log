
Files already downloaded and verified
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
avg_accuracy: 0.003333333432674408
Global batch 0, avg loss after 100 batches: 0.074  | Global batch 0, avg accuracy after 100 batches: 0.33
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
preds: torch.Size([16, 9, 1623]), target_one_hot: torch.Size([16, 9, 1623])
input 1: torch.Size([144, 1623]), input 2: torch.Size([144, 1623])
losses_all: torch.Size([])
Traceback (most recent call last):
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 71, in <module>
    experiment_base(dataset)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 61, in experiment_base
    trainer.train()
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/train_resnet.py", line 95, in train
    preds = self.model(torch.permute(examples, (0, 1, 4, 2, 3)))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 41, in forward
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 41, in <listcomp>
    return torch.stack([self.sequence_pass(x[i]) for i in range(batch_size)])
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet_with_projection.py", line 33, in sequence_pass
    x = super(ProjectionResNet, self).forward(x)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/models/resnet.py", line 64, in forward
    z = self.layer2(z)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/container.py", line 139, in forward
    input = module(input)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torchvision/models/resnet.py", line 97, in forward
    out = self.bn2(out)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 168, in forward
    return F.batch_norm(
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/nn/functional.py", line 2438, in batch_norm
    return torch.batch_norm(
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/traceback.py", line 197, in format_stack
    return format_list(extract_stack(f, limit=limit))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/traceback.py", line 211, in extract_stack
    stack = StackSummary.extract(walk_stack(f), limit=limit)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/traceback.py", line 366, in extract
    f.line
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/traceback.py", line 288, in line
    self._line = linecache.getline(self.filename, self.lineno).strip()
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/linecache.py", line 32, in getline
    return lines[lineno - 1]
KeyboardInterrupt