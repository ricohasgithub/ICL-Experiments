
Files already downloaded and verified
predicted labels: tensor([431, 198, 167, 198, 167, 198, 198, 167, 198])
target labels: tensor([797, 623, 593,  70, 593,  70,  70, 593,  70])
avg_accuracy: 0.0
Global batch 0, avg loss after 100 batches: 3.164  | Global batch 0, avg accuracy after 100 batches: 0.0
predicted labels: tensor([431, 131, 198, 131, 131, 198, 198, 198, 198])
target labels: tensor([443, 689, 691, 689, 689, 200, 200, 200, 200])
predicted labels: tensor([198, 198, 198, 198, 431, 167, 198, 198, 198])
target labels: tensor([616, 826, 826, 616, 314, 407, 826, 616, 616])
predicted labels: tensor([131, 198, 198, 684, 431, 198, 198, 167, 131])
target labels: tensor([511, 382, 807, 583, 226, 807, 604, 678, 129])
predicted labels: tensor([429, 684, 684, 429, 429, 684, 198, 198, 429])
target labels: tensor([876, 396, 396, 876, 876, 396, 392, 558, 876])
predicted labels: tensor([ 198,  198,  131,  198,  131,  198,  131, 1550,  198])
target labels: tensor([894, 894,  81, 894,  81, 914,  81, 853, 894])
predicted labels: tensor([ 131,  684,  684,  431,  684,  431,  431, 1148,  431])
target labels: tensor([199, 515, 515, 827, 515, 827, 827, 177, 827])
predicted labels: tensor([198, 431, 717, 198, 198, 431, 198, 431, 198])
target labels: tensor([590, 470, 724, 537, 537, 470, 537, 470, 537])
predicted labels: tensor([198, 198, 167, 167, 198, 198, 167, 684, 167])
target labels: tensor([795, 236, 223, 223, 795, 795, 223, 222, 223])
predicted labels: tensor([198, 198, 198, 198, 131, 131, 131, 131, 131])
target labels: tensor([205, 872, 205, 205, 334, 665, 334, 334, 334])
predicted labels: tensor([167, 198, 167, 160, 198, 198, 198, 167, 167])
target labels: tensor([941, 248, 941, 165, 103, 103, 103, 941, 941])
predicted labels: tensor([429, 131, 167, 167, 198, 131, 131, 167, 131])
target labels: tensor([317, 165, 245, 245, 740, 165, 165, 245, 165])
predicted labels: tensor([198, 198, 131, 198, 198, 198, 167, 198, 198])
target labels: tensor([719,  49, 539, 719,  49, 719, 140,  49,  49])
predicted labels: tensor([684, 613, 198, 198, 198, 684, 131, 684, 198])
target labels: tensor([448, 257, 310, 310, 310, 448, 554, 448, 310])
predicted labels: tensor([429, 131, 131, 131, 429, 167, 429, 131, 131])
target labels: tensor([ 56, 490, 847, 847,  56,  37,  56, 847, 847])
predicted labels: tensor([431, 198, 131, 131, 167, 429, 160, 431, 198])
target labels: tensor([703,  75,  27, 755, 233, 849,  73, 739, 790])
predicted labels: tensor([ 431,  131,  167,  429,  431,  198,  198,  403, 1373])
target labels: tensor([502, 363, 878, 943, 624, 775,  26, 769, 366])
predicted labels: tensor([ 429,  684, 1148,  167,  429,  429,  167,  167,  167])
target labels: tensor([733, 557, 958, 896, 733, 733, 896, 896, 896])
predicted labels: tensor([131, 160, 131, 131, 198, 429, 198, 198, 198])
target labels: tensor([534, 647, 534, 534, 651, 548, 651, 651, 651])
predicted labels: tensor([431, 198, 131, 131, 131, 431,   0, 431, 131])
target labels: tensor([579,  26, 386, 386, 386, 579, 560, 579, 386])
predicted labels: tensor([131, 131, 167, 131, 131, 167, 167, 431, 131])
target labels: tensor([ 10,  10, 317, 568,  10, 317, 317, 181,  10])
predicted labels: tensor([429, 923, 131, 923, 923, 131, 131, 131, 131])
target labels: tensor([542, 654, 880, 654, 654, 880, 880, 126, 880])
predicted labels: tensor([429, 160, 131, 131, 160, 431, 160, 131, 160])
target labels: tensor([909, 511,  35,  35, 511, 428, 511,  35, 511])
predicted labels: tensor([160, 167, 160, 160, 167, 167, 131, 167, 167])
target labels: tensor([662, 885, 662, 662, 885, 885, 899, 885, 885])
predicted labels: tensor([198, 198, 131, 131, 198, 198, 131, 131, 198])
target labels: tensor([703, 236, 882, 882, 703, 703, 679, 882, 703])
predicted labels: tensor([131, 160, 429, 131, 264, 198, 167, 431, 131])
target labels: tensor([160, 500, 744, 456, 531, 354, 915, 813, 845])
predicted labels: tensor([167, 131, 131, 431, 167, 131, 131, 167, 167])
target labels: tensor([869, 225, 225, 516, 869, 225, 280, 869, 869])
predicted labels: tensor([198, 198, 167, 198, 429, 198, 167, 167, 167])
target labels: tensor([ 45,  45, 818,  45, 121, 236, 818, 818, 818])
predicted labels: tensor([684, 131, 684, 264, 684, 131, 131, 131, 131])
target labels: tensor([962,  88, 962, 318, 962,  11,  88,  88,  88])
predicted labels: tensor([160, 160, 429, 167, 160, 429, 403, 429, 160])
target labels: tensor([817, 817, 218, 601, 817, 218, 153, 218, 817])
predicted labels: tensor([131, 131, 684, 429, 684, 684, 198, 131, 131])
target labels: tensor([591, 591,   7, 590,   7,   7, 133, 591, 591])
predicted labels: tensor([429, 431, 431, 429, 131, 131,  35, 131, 131])
target labels: tensor([196, 792, 787, 850, 145, 252, 628, 302, 930])
predicted labels: tensor([167, 167, 160, 131, 160, 167, 160, 160, 160])
target labels: tensor([246, 246,  34, 656,  34, 246,  34, 232,  34])
predicted labels: tensor([167, 431, 131, 431, 431, 431, 167, 167, 167])
target labels: tensor([298, 849, 461, 632, 849, 849, 298, 298, 298])
predicted labels: tensor([131, 160, 160, 131, 160, 131, 131, 131, 160])
target labels: tensor([218, 684, 684, 735, 684, 218, 218, 645, 684])
predicted labels: tensor([717, 131, 431, 131, 431, 131, 131, 431, 131])
target labels: tensor([534, 185, 849,  86, 849, 185, 185, 849, 185])
predicted labels: tensor([717, 198, 131, 717, 198, 131, 198, 717, 198])
target labels: tensor([366,  44, 519, 366,  44, 679,  44, 366,  44])
predicted labels: tensor([131, 160, 160, 131, 160, 131, 131, 131, 160])
target labels: tensor([879, 375, 375, 605, 375, 879, 879,  73, 375])
predicted labels: tensor([131, 167, 198, 198, 131, 131, 429, 198, 198])
target labels: tensor([826, 776, 264, 264, 826, 826, 554, 264, 264])
predicted labels: tensor([858, 160, 429, 160, 131, 429, 429, 160, 160])
target labels: tensor([660, 889, 308, 889, 334, 308, 308, 889, 889])
predicted labels: tensor([431, 160, 160, 160, 131, 131, 131, 160, 160])
target labels: tensor([883, 194, 194, 194, 710, 710, 710, 260, 194])
predicted labels: tensor([131, 429, 131, 131, 131, 429, 429, 131, 429])
target labels: tensor([103, 659, 783, 783, 685, 659, 659, 783, 659])
predicted labels: tensor([198, 198, 429, 131, 435, 131, 131, 198, 198])
target labels: tensor([278, 278, 744, 803, 622, 803, 803, 278, 278])
predicted labels: tensor([131, 431, 167, 717, 167, 167, 431, 431, 167])
target labels: tensor([392, 206, 211,  58, 211, 211, 206, 206, 211])
predicted labels: tensor([131, 167, 198, 198, 167, 198, 431, 167, 198])
target labels: tensor([800, 439, 293, 293, 439, 293, 571, 439, 293])
predicted labels: tensor([198, 431, 431, 431, 131, 198, 198, 717, 431])
target labels: tensor([636, 438, 438, 438, 353, 636, 636, 711, 438])
predicted labels: tensor([431, 198, 431, 429, 198, 431, 429, 429, 429])
target labels: tensor([341, 745, 341, 572, 418, 341, 572, 572, 572])
predicted labels: tensor([198, 717, 198, 431, 431, 431, 198, 431, 431])
target labels: tensor([561, 473, 561, 204, 204, 204, 561, 284, 204])
predicted labels: tensor([198, 131, 198, 167, 131, 131, 131, 198, 198])
target labels: tensor([790, 538, 790,  47,   0, 538, 538, 790, 790])
predicted labels: tensor([198, 198, 198, 431, 198, 131, 198, 198, 198])
target labels: tensor([246, 246, 393, 254, 393, 307, 393, 246, 246])
predicted labels: tensor([131, 198, 431, 167, 431, 131, 160, 431, 717])
target labels: tensor([783, 482, 479,  92, 356, 222, 230, 254, 819])
predicted labels: tensor([131, 131, 131, 431, 431, 131, 431, 131, 431])
target labels: tensor([414,  36, 414, 753, 753, 414, 753, 755, 753])
predicted labels: tensor([403, 198, 198, 403, 198, 429, 403, 198, 198])
target labels: tensor([484, 666,  11, 484, 666, 384, 484, 666, 666])
predicted labels: tensor([431, 431, 431, 131, 167, 167, 131, 131, 431])
target labels: tensor([ 55,  55,  55, 380, 648, 421, 380, 380,  55])
predicted labels: tensor([131, 198, 431, 131, 198, 198, 131, 431, 131])
target labels: tensor([ 94, 552, 673,  94, 552, 552,  94, 179,  94])
predicted labels: tensor([131, 717, 131, 131, 131, 717, 717, 131, 131])
target labels: tensor([461, 870, 764, 614, 614, 870, 870, 614, 614])
predicted labels: tensor([131, 131, 131, 131, 131, 198, 717, 131, 131])
target labels: tensor([650, 853, 650, 853, 650, 963,  21, 853, 853])
predicted labels: tensor([131, 429, 429, 131, 131, 431, 131, 429, 429])
target labels: tensor([529, 592, 592, 529, 427, 467, 529, 592, 592])
predicted labels: tensor([717, 131, 131, 131, 131, 717, 717, 403, 131])
target labels: tensor([313, 361, 361, 361, 781, 313, 313, 778, 361])
predicted labels: tensor([131, 131, 131, 131, 131, 198, 131, 131, 131])
target labels: tensor([861,  67,  67, 861, 195, 482, 861,  67, 861])
predicted labels: tensor([198, 684, 131, 198, 131, 198, 131, 131, 198])
target labels: tensor([332, 426, 770, 332, 744, 332, 770, 770, 332])
predicted labels: tensor([198, 131, 198, 198, 131, 198, 198, 198, 198])
target labels: tensor([125, 775, 201, 125, 446, 201, 201, 125, 201])
predicted labels: tensor([131, 160, 131, 160, 160, 131, 131, 131, 131])
target labels: tensor([337, 616,  94, 616, 616,  94, 250,  94,  94])
predicted labels: tensor([431, 431, 131, 717, 131, 131, 431,   6, 131])
target labels: tensor([897, 897, 311, 400, 311, 311, 897, 348, 311])
predicted labels: tensor([131, 431, 431, 131, 198, 131, 131, 431, 431])
target labels: tensor([ 19, 824, 824, 189, 452, 189, 189, 824, 824])
predicted labels: tensor([131, 131, 131, 131, 717, 875, 131, 131, 131])
target labels: tensor([273,  89, 273,  89, 316, 907,  89, 273,  89])
predicted labels: tensor([198, 131, 429, 131, 198, 198, 198, 131, 131])
target labels: tensor([554, 341, 178, 341,  59, 554, 554, 341, 341])
predicted labels: tensor([431, 431, 431, 814, 198, 198, 717, 198, 431])
target labels: tensor([226, 226, 226, 826, 414, 414, 395, 414, 226])
predicted labels: tensor([198, 131, 131, 429, 131, 131, 131, 131, 131])
target labels: tensor([253, 706, 566, 687, 706, 566, 566, 706, 706])
predicted labels: tensor([131, 131, 431, 198, 131, 198, 198, 431, 131])
target labels: tensor([402, 402, 520, 474, 402, 474, 474, 304, 402])
predicted labels: tensor([131, 198, 198, 131, 431, 431, 198, 131, 131])
target labels: tensor([127, 804, 804, 127, 268, 285, 804, 127, 127])
predicted labels: tensor([131, 198, 131, 131, 198, 198, 131, 198, 131])
target labels: tensor([593, 326, 472, 593, 844, 844, 593, 844, 593])
predicted labels: tensor([431, 167, 198, 167, 431, 167, 160, 431, 167])
target labels: tensor([676, 388, 521, 388, 676, 388, 636, 676, 388])
predicted labels: tensor([431, 429, 429, 194, 431, 431, 429, 814, 431])
target labels: tensor([484, 357, 357, 618, 484, 484, 357, 733, 484])
predicted labels: tensor([431, 167, 431, 435, 167, 431, 431, 167, 167])
target labels: tensor([118, 114, 544, 890, 114, 118, 118, 114, 114])
predicted labels: tensor([198, 198, 198, 431, 198, 717, 431, 431, 198])
target labels: tensor([196, 196, 196, 117,  18, 799, 117, 117, 196])
predicted labels: tensor([431, 198, 198, 717, 431, 435, 431, 198, 198])
target labels: tensor([778, 236, 236, 195, 778, 639, 778, 236, 236])
predicted labels: tensor([131, 160, 198, 198, 160, 160, 131, 198, 198])
target labels: tensor([  5, 232, 532, 532, 232, 232, 279, 532, 532])
predicted labels: tensor([198, 198, 431, 198, 131, 198, 198, 198, 198])
target labels: tensor([210, 152, 206, 210, 621, 210, 152, 152, 210])
predicted labels: tensor([160, 435, 160, 717, 160, 717, 717, 717, 160])
target labels: tensor([ 12, 695,  12, 136,  12, 136, 425, 136,  12])
predicted labels: tensor([131, 131, 435, 198, 131, 717, 717, 717, 131])
target labels: tensor([888, 888, 949, 906, 888, 708, 708, 708, 888])
predicted labels: tensor([431, 198, 431, 431, 431, 198, 198, 431, 431])
target labels: tensor([609, 162, 609, 383, 609, 162, 162, 447, 609])
predicted labels: tensor([198, 131, 198, 198, 131, 131, 198, 717, 198])
target labels: tensor([329, 830, 586, 329, 830, 830, 329, 503, 329])
predicted labels: tensor([131, 198, 431, 160, 198, 131, 131, 198, 131])
target labels: tensor([130, 823, 683, 220, 823, 130, 130, 823, 130])
predicted labels: tensor([717, 131, 131, 198, 131, 431, 717, 717, 131])
target labels: tensor([819, 768, 768,  69, 768, 817, 819, 819, 768])
predicted labels: tensor([160, 131, 131, 131, 131, 160, 160, 717, 160])
target labels: tensor([466, 728, 818, 728, 728, 466, 466, 780, 466])
predicted labels: tensor([160, 160, 160, 198, 160, 160, 431, 160, 160])
target labels: tensor([186, 186, 355,  38, 355, 186, 892, 355, 186])
predicted labels: tensor([435,  35, 717, 717, 717,  35, 717,  35, 717])
target labels: tensor([791, 362, 417, 500, 500, 362, 500, 362, 500])
predicted labels: tensor([431, 717, 160, 167, 160, 717, 160, 717, 717])
target labels: tensor([583, 826, 437, 114, 437, 826, 437, 826, 826])
predicted labels: tensor([875, 875, 717, 717, 875, 131, 403, 717, 717])
target labels: tensor([330, 330, 827, 827, 330,  84, 264, 827, 827])
predicted labels: tensor([431, 717, 431, 264, 198, 198, 431, 198, 431])
target labels: tensor([368, 526, 368, 767, 901, 901, 368, 901, 368])
predicted labels: tensor([198, 198, 717, 131, 131, 131, 431, 717, 198])
target labels: tensor([305, 437, 331, 600, 650, 851, 496,  34,  15])
predicted labels: tensor([431, 131, 431, 198, 198, 198, 717, 431, 431])
target labels: tensor([269, 140, 269, 686, 686, 686, 817, 269, 269])
predicted labels: tensor([160, 131, 717, 717, 198, 131, 131, 717, 131])
target labels: tensor([945, 359, 322, 322, 273, 359, 359, 322, 359])
predicted labels: tensor([431, 431, 198, 431, 431, 198, 198, 131, 198])
target labels: tensor([ 67,  67, 397,  67, 697, 397, 397, 181, 397])
predicted labels: tensor([717, 431, 198, 431, 198, 431, 435, 198, 431])
target labels: tensor([294, 726, 678, 726, 678, 726,  69, 678, 726])
predicted labels: tensor([717, 431, 131, 717, 160, 131, 198, 717, 613])
target labels: tensor([512, 464, 941, 780, 230, 429, 378,  31, 957])
predicted labels: tensor([198, 198, 198, 198, 198, 198, 431, 131, 198])
target labels: tensor([675, 236, 236, 675, 675, 236, 341, 538, 675])
predicted labels: tensor([131, 131, 717, 167, 131, 167, 131, 167, 167])
target labels: tensor([796, 820, 512, 388, 820, 388, 820, 388, 388])
predicted labels: tensor([717, 717, 717, 717, 431, 717, 198, 717, 717])
target labels: tensor([515, 807, 807, 515, 200, 515, 348, 807, 515])
predicted labels: tensor([131, 717, 160, 160, 160, 160, 131, 131, 131])
target labels: tensor([238, 344, 837,  10, 837, 837, 238, 238, 238])
avg_accuracy: 0.48
predicted labels: tensor([198, 717, 717, 198, 717, 717, 198, 435, 717])total, from_support) after 100 batches: 48.0
target labels: tensor([290, 334, 425, 290, 334, 334, 290, 637, 334])
predicted labels: tensor([198, 613, 613, 198, 431, 198, 613, 717, 198])
target labels: tensor([762, 123, 123, 762, 745, 762, 123, 534, 762])
predicted labels: tensor([131, 717, 717, 160, 717, 131, 131, 431, 717])
target labels: tensor([474, 686, 686, 513, 686, 474, 474, 202, 686])
predicted labels: tensor([717, 194, 431, 431, 431, 717, 717, 435, 431])
target labels: tensor([243, 436, 769, 769, 769, 243, 243, 157, 769])
predicted labels: tensor([198, 717, 431, 198, 717, 160, 198, 717, 198])
target labels: tensor([518, 500, 596, 518, 500, 907, 518, 500, 518])
predicted labels: tensor([131, 435, 131, 435, 131, 717, 717, 717, 131])
target labels: tensor([891, 218, 891, 426, 891, 495, 495, 495, 891])
predicted labels: tensor([131, 131, 431, 131, 431, 431, 198, 717, 131])
target labels: tensor([406, 406, 110, 406, 110, 110,  39,  80, 406])
predicted labels: tensor([198, 160, 160, 717, 160, 717, 900, 717, 717])
target labels: tensor([477, 493, 493, 662, 493, 662, 742, 662, 662])
predicted labels: tensor([431, 717, 431, 765, 431, 717, 717, 717, 717])
target labels: tensor([916, 783, 916, 670, 916, 592, 783, 783, 783])
Traceback (most recent call last):
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 71, in <module>
    experiment_base(dataset)
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/./experiment_resnet.py", line 61, in experiment_base
    trainer.train()
  File "/Users/starfarmer2/Desktop/Jasper/Coding Files/CSPlus/ICL-Experiments/train_resnet.py", line 114, in train
    loss.backward()
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/_tensor.py", line 396, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/torch/autograd/__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt